import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# --- Step 1: Simulate data ---
np.random.seed(42)  # For reproducibility

data = {
    'student_id': np.arange(1, 201),
    'internship_domain': np.random.choice(
        ['AI', 'Data Science', 'Web Development', 'Cybersecurity', 'IoT', 'Cloud Computing'], 200),
    'application_date': pd.to_datetime(np.random.choice(pd.date_range('2023-01-01', '2023-06-30'), 200)),
    'participation_status': np.random.choice(['Applied', 'Selected', 'Completed'], 200, p=[0.6, 0.25, 0.15])
}
df = pd.DataFrame(data)

# --- Step 2: Aggregate engagement ---
domain_status_counts = df.groupby(['internship_domain', 'participation_status']).size().unstack(fill_value=0)

print("Engagement counts by domain and status:")
print(domain_status_counts)

# --- Step 3: Visualize engagement ---
plt.figure(figsize=(10,6))
domain_status_counts.plot(kind='bar', stacked=True, colormap='Set2', figsize=(10,6))
plt.title('Student Engagement Across Internship Domains')
plt.xlabel('Internship Domain')
plt.ylabel('Number of Students')
plt.legend(title='Participation Status')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# --- Step 4: Analyze trends over time ---
df['month'] = df['application_date'].dt.to_period('M')
monthly_apps = df[df['participation_status']=='Applied'].groupby(['month', 'internship_domain']).size().unstack(fill_value=0)

plt.figure(figsize=(12,6))
for domain in monthly_apps.columns:
    plt.plot(monthly_apps.index.astype(str), monthly_apps[domain], marker='o', label=domain)
plt.title('Monthly Internship Applications by Domain')
plt.xlabel('Month')
plt.ylabel('Number of Applications')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# --- Step 5: Insights ---
most_popular = domain_status_counts['Applied'].idxmax()
print(f"Most popular internship domain (by applications): {most_popular}")

growth_rates = {}
for domain in monthly_apps.columns:
    first = monthly_apps[domain].iloc[0]
    last = monthly_apps[domain].iloc[-1]
    if first > 0:
        growth_rates[domain] = (last - first) / first
    else:
        growth_rates[domain] = np.nan

growth_rates = {k: v for k,v in growth_rates.items() if pd.notna(v)}
fastest_growing = max(growth_rates, key=growth_rates.get)

print(f"Fastest growing internship domain (application growth rate): {fastest_growing} ({growth_rates[fastest_growing]*100:.1f}%)")

# --- (Optional) Step 6: Basic Dash dashboard ---
"""
# Uncomment below to run dashboard; requires 'dash' installed
import dash
from dash import dcc, html
import plotly.express as px

app = dash.Dash(__name__)

fig = px.bar(domain_status_counts.reset_index(),
             x='internship_domain',
             y=['Applied', 'Selected', 'Completed'],
             barmode='stack',
             title="Student Engagement by Internship Domain")

app.layout = html.Div([
    html.H1("MITS Internship Domain Engagement"),
    dcc.Graph(figure=fig)
])

if __name__ == '__main__':
    app.run_server(debug=True)
"""

